[gd_scene load_steps=9 format=2]

[ext_resource path="res://Assets/Sprites/Backgrounds/WorldMap.png" type="Texture" id=1]
[ext_resource path="res://Content/VFX/PlanetSphere.cs" type="Script" id=2]
[ext_resource path="res://Content/VFX/PlanetNoiseTex.tres" type="Texture" id=3]
[ext_resource path="res://Assets/Sprites/Backgrounds/HeightMap.png" type="Texture" id=4]

[sub_resource type="Shader" id=13]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable.mono's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx,unshaded,shadows_disabled;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform sampler2D texture_cloud_shadows : hint_albedo;
uniform sampler2D texture_heightmap : hint_albedo;
uniform float heightmap_scale : hint_range(0,1);
uniform float heightmap_cutoff : hint_range(0,1);
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform float alpha_cull : hint_range(0, 1);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

const float pi = 3.141592653589793238462643383279;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float height = texture(texture_heightmap,UV).r;
	height *= float(int(height>heightmap_cutoff));
	float true_height = (height)*heightmap_scale;
	float horiz = (UV.x*2.0*pi)-pi;
	float vert = (UV.y*pi)-(pi/2.0);
	float xy = -cos(vert);
	float z = -sin(vert);
	vec3 offset = vec3(xy*sin(horiz), z, xy*cos(horiz));
		
	VERTEX+=normalize(offset)*true_height;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	vec4 shadow_tex = texture(texture_cloud_shadows, base_uv);
	float shadeValue = 0.4 * float(int(shadow_tex.r>alpha_cull));
	ALBEDO = albedo.rgb * albedo_tex.rgb * (1.0-shadeValue);
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/heightmap_scale = 0.019
shader_param/heightmap_cutoff = 0.318
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/alpha_cull = 0.557
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 1 )
shader_param/texture_cloud_shadows = ExtResource( 3 )
shader_param/texture_heightmap = ExtResource( 4 )

[sub_resource type="Shader" id=11]
code = "// NOTE: Shader automatically converted from Godot Engine 3.5.1.stable.mono's SpatialMaterial.

shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_opaque,cull_disabled,diffuse_lambert,specular_blinn,unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float alpha_cull : hint_range(0, 1);
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb;// * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALPHA = albedo_tex.r * float(int(albedo_tex.r > alpha_cull));
}
"

[sub_resource type="ShaderMaterial" id=12]
render_priority = 1
shader = SubResource( 11 )
shader_param/albedo = Color( 1, 1, 1, 0.666667 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/alpha_cull = 0.557
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 3 )

[node name="Planet" type="Viewport"]
size = Vector2( 1920, 1080 )
size_override_stretch = true
transparent_bg = true
fxaa = true
sharpen_intensity = 1.0
hdr = false

[node name="CSGSphere" type="CSGSphere" parent="."]
cast_shadow = 0
generate_lightmap = false
radius = 0.995
radial_segments = 100
rings = 50
material = SubResource( 14 )
script = ExtResource( 2 )
radScalar = 0.995

[node name="CSGSphere2" type="CSGSphere" parent="."]
cast_shadow = 0
generate_lightmap = false
radius = 1.01
radial_segments = 100
rings = 50
material = SubResource( 12 )
script = ExtResource( 2 )
radScalar = 0.995

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.686022, -0.727581, 0, 0.727581, 0.686022, 0, 0, 1.13015 )
fov = 36.8
